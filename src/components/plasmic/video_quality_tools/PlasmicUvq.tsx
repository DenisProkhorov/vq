// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uiSe3eYwgW9BnHgrSutGmY
// Component: m7U0BUx71bpV

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: icUFmVqp2e7p/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: uiSe3eYwgW9BnHgrSutGmY/projectcss
import sty from "./PlasmicUvq.module.css"; // plasmic-import: m7U0BUx71bpV/css

createPlasmicElementProxy;

export type PlasmicUvq__VariantMembers = {};
export type PlasmicUvq__VariantsArgs = {};
type VariantPropType = keyof PlasmicUvq__VariantsArgs;
export const PlasmicUvq__VariantProps = new Array<VariantPropType>();

export type PlasmicUvq__ArgsType = {};
type ArgPropType = keyof PlasmicUvq__ArgsType;
export const PlasmicUvq__ArgProps = new Array<ArgPropType>();

export type PlasmicUvq__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  form?: Flex__<typeof FormWrapper>;
  originalFile?: Flex__<typeof FormItemWrapper>;
  originalFileLink?: Flex__<typeof AntdInput>;
  upload?: Flex__<typeof UploadWrapper>;
  compressedFile?: Flex__<typeof FormItemWrapper>;
  compressedFileLink?: Flex__<typeof AntdInput>;
  upload2?: Flex__<typeof UploadWrapper>;
  calcPsnr?: Flex__<typeof FormItemWrapper>;
};

export interface DefaultUvqProps {
  className?: string;
}

const $$ = {};

function PlasmicUvq__RenderFunc(props: {
  variants: PlasmicUvq__VariantsArgs;
  args: PlasmicUvq__ArgsType;
  overrides: PlasmicUvq__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "originalFileLink.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "compressedFileLink.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: [],
                initialValues: (() => {
                  try {
                    return $queries.ticket.data[0];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: undefined,
                onFinish: async values => {
                  const $steps = {};

                  $steps["postgresUpdateMany"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "5h6RjHym2DLMZyGUcVFpZC",
                            opId: "0c8dd201-effa-4177-9ed0-919457d2d31a",
                            userArgs: {
                              conditions: [$ctx.params.id]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: "39dc889c-90db-4ac7-a66c-349e9b9237f9"
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateMany"] != null &&
                    typeof $steps["postgresUpdateMany"] === "object" &&
                    typeof $steps["postgresUpdateMany"].then === "function"
                  ) {
                    $steps["postgresUpdateMany"] = await $steps[
                      "postgresUpdateMany"
                    ];
                  }
                },
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form"] = ref;
                },
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <FormItemWrapper
                    data-plasmic-name={"originalFile"}
                    data-plasmic-override={overrides.originalFile}
                    className={classNames("__wab_instance", sty.originalFile)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__un5Ln
                        )}
                      >
                        {"Original file URL"}
                      </div>
                    }
                    name={"Original file"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.originalFileLink
                        ),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["originalFileLink", "value"],
                          AntdInput_Helpers
                        ),
                        value: generateStateValueProp($state, [
                          "originalFileLink",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "originalFileLink.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"originalFileLink"}
                          data-plasmic-override={overrides.originalFileLink}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <UploadWrapper
                    data-plasmic-name={"upload"}
                    data-plasmic-override={overrides.upload}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload)}
                    files={generateStateValueProp($state, ["upload", "files"])}
                    onFilesChange={generateStateOnChangeProp($state, [
                      "upload",
                      "files"
                    ])}
                    showUploadList={true}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__xiz3D
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wIaq0
                        )}
                      >
                        {"Upload"}
                      </div>
                    </AntdButton>
                  </UploadWrapper>
                  {(() => {
                    try {
                      return currentUser.roleName === "Admin";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <FormItemWrapper
                      data-plasmic-name={"compressedFile"}
                      data-plasmic-override={overrides.compressedFile}
                      className={classNames(
                        "__wab_instance",
                        sty.compressedFile
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tIrPh
                          )}
                        >
                          {"Compressed file URL"}
                        </div>
                      }
                      name={"Compressed file"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.compressedFileLink
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["compressedFileLink", "value"],
                            AntdInput_Helpers
                          ),
                          type: "text",
                          value: generateStateValueProp($state, [
                            "compressedFileLink",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "compressedFileLink.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"compressedFileLink"}
                            data-plasmic-override={overrides.compressedFileLink}
                            {...child$Props}
                          />
                        );
                      })()}
                      <UploadWrapper
                        data-plasmic-name={"upload2"}
                        data-plasmic-override={overrides.upload2}
                        accept={""}
                        className={classNames("__wab_instance", sty.upload2)}
                        files={generateStateValueProp($state, [
                          "upload2",
                          "files"
                        ])}
                        onFilesChange={generateStateOnChangeProp($state, [
                          "upload2",
                          "files"
                        ])}
                        showUploadList={true}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__dLIsp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gzawY
                            )}
                          >
                            {"Upload"}
                          </div>
                        </AntdButton>
                      </UploadWrapper>
                    </FormItemWrapper>
                  ) : null}
                  <FormItemWrapper
                    data-plasmic-name={"calcPsnr"}
                    data-plasmic-override={overrides.calcPsnr}
                    className={classNames("__wab_instance", sty.calcPsnr)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bs9Xl
                        )}
                      >
                        {"Label"}
                      </div>
                    }
                    noLabel={true}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__iNz6P
                      )}
                      disabled={true}
                      size={"large"}
                      submitsForm={false}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___92V2P
                        )}
                      >
                        {"Calculate"}
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                </FormWrapper>
              );
            })()}
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "form",
    "originalFile",
    "originalFileLink",
    "upload",
    "compressedFile",
    "compressedFileLink",
    "upload2",
    "calcPsnr"
  ],
  pageLayout: ["pageLayout"],
  section: [
    "section",
    "form",
    "originalFile",
    "originalFileLink",
    "upload",
    "compressedFile",
    "compressedFileLink",
    "upload2",
    "calcPsnr"
  ],
  form: [
    "form",
    "originalFile",
    "originalFileLink",
    "upload",
    "compressedFile",
    "compressedFileLink",
    "upload2",
    "calcPsnr"
  ],
  originalFile: ["originalFile", "originalFileLink"],
  originalFileLink: ["originalFileLink"],
  upload: ["upload"],
  compressedFile: ["compressedFile", "compressedFileLink", "upload2"],
  compressedFileLink: ["compressedFileLink"],
  upload2: ["upload2"],
  calcPsnr: ["calcPsnr"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  form: typeof FormWrapper;
  originalFile: typeof FormItemWrapper;
  originalFileLink: typeof AntdInput;
  upload: typeof UploadWrapper;
  compressedFile: typeof FormItemWrapper;
  compressedFileLink: typeof AntdInput;
  upload2: typeof UploadWrapper;
  calcPsnr: typeof FormItemWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUvq__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUvq__VariantsArgs;
    args?: PlasmicUvq__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUvq__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUvq__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUvq__ArgProps,
          internalVariantPropNames: PlasmicUvq__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUvq__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUvq";
  } else {
    func.displayName = `PlasmicUvq.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"39dc889c-90db-4ac7-a66c-349e9b9237f9"}
      appId={"uiSe3eYwgW9BnHgrSutGmY"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "uiSe3eYwgW9BnHgrSutGmY"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicUvq = Object.assign(
  // Top-level PlasmicUvq renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    form: makeNodeComponent("form"),
    originalFile: makeNodeComponent("originalFile"),
    originalFileLink: makeNodeComponent("originalFileLink"),
    upload: makeNodeComponent("upload"),
    compressedFile: makeNodeComponent("compressedFile"),
    compressedFileLink: makeNodeComponent("compressedFileLink"),
    upload2: makeNodeComponent("upload2"),
    calcPsnr: makeNodeComponent("calcPsnr"),

    // Metadata about props expected for PlasmicUvq
    internalVariantProps: PlasmicUvq__VariantProps,
    internalArgProps: PlasmicUvq__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUvq;
/* prettier-ignore-end */
